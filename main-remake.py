#  $$\   $$\          $$\ $$\           $$\             $$\ 
#  $$ | $$  |         $$ |\__|          $$ |            $$ |
#  $$ |$$  / $$$$$$\  $$ |$$\  $$$$$$$\ $$ |  $$\       $$ |
#  $$$$$  /  \____$$\ $$ |$$ |$$  _____|$$ | $$  |      $$ |
#  $$  $$<   $$$$$$$ |$$ |$$ |$$ /      $$$$$$  /       \__|
#  $$ |\$$\ $$  __$$ |$$ |$$ |$$ |      $$  _$$<            
#  $$ | \$$\\$$$$$$$ |$$ |$$ |\$$$$$$$\ $$ | \$$\       $$\ 
#  \__|  \__|\_______|\__|\__| \_______|\__|  \__|      \__|
#
# Created by: MayITNick

# –ë–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏–∫—É–º–∞!

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from telebot import types, TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import modules.gloris_integration as gloris
import modules.permissions as permissions
import modules.constants as constants
import modules.ai as ai
from dotenv import load_dotenv
from datetime import datetime
from datetime import timedelta
import traceback
import requests
import database
import random
import time
import os
import re
import importlib
import pkgutil
import commands

COMMANDS = []

def send_to_ai(message):
    try:
        text = message.text or "–ø—Ä–∏–≤–µ—Ç"
        sent_msg = bot.reply_to(message, "–°–µ–∫—É, –¥–∞–π –ø–æ–¥—É–º–∞—Ç—å...")

        answer = ai.ask_io_net(text, user_id=message.from_user.id)

        if not answer.strip():
            answer = "(–∑–∞–≤–∏—Å... –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑?) („Éª„Éª )?"

        bot.edit_message_text(
            answer,
            chat_id=message.chat.id,
            message_id=sent_msg.message_id,
            parse_mode='HTML',
        )
        return True
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è –∏–∏: {e}")
        return False

for _, module_name, _ in pkgutil.iter_modules(commands.__path__):
    module = importlib.import_module(f"commands.{module_name}")
    COMMANDS.append(module)

load_dotenv()

db = database.Database()
perm = permissions.Permissions()
CONSTANTS = constants.CONSTANTS()
bot = TeleBot(os.getenv('TOKEN'))
profanity_regex = re.compile(r"(\s+|^)[–ø–ün—Ä–†p]?[3–ó–∑–íB–≤–ün–ø—Ä–†pP–êaA–∞–ûoO0–æ]?[—Å–°cC–∏–òuU–ûoO0–æ–êaA–∞—ã–´—É–£y—Ç–¢T]?[–ü–øn][–∏–òuUeE–µ–ï][–∑–ó3][–î–¥Dd]\w*[\?\,\.\;\-]*|(\s+|^)[—Ä–†pP–ø–ün]?[—Ä–†pP–æ–ûoO0–∞–êaA–∑–ó3]?[–æ–ûoO0–∏–òuU–∞–êaAcC—Å–°–∑–ó3—Ç–¢T—É–£y]?[Xx–•—Ö][—É–£y][–π–ô–µ–ïeEe—è–Ø9—é–Æ]\w*[\?\,\.\;\-]*|(\s+|^)[–±–ø–ün–ë6][–ª–õ][—è–Ø9]([–¥—Ç–î–¢DT]\w*)?[\?\,\.\;\-]*|(\s+|^)(([–∑–ó–æ–ûoO03]?[–∞–êaA—Ç–¢T]?[—ä–™]?)|(\w+[–æ–ûOo0–µ–ïeE]))?[–µ–ïeE–∏–òuU—ë–Å][–±–ë6–ø–ü]([–∞–êaA–∏–òuU—É–£y]\w*)?[\?\,\.\;\-]*")

FOUNDER_ID = int(os.getenv('FOUNDER_ID'))

def check_for_kalik(message):
    text = message.text.lower().strip()
    # –õ–æ–≤–∏–º –ª—é–±–æ–π "–∑–æ–≤", –¥–∞–∂–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    # "–ö–∞–ª..."
    # –ö –ø—Ä–∏–º–µ—Ä—É - "–ö–∞–ª–∏–∏–∏–∫, –ø–∏–Ω–≥"
    return bool(re.match(r"^–∫–∞–ª[–∞-—è—ë]*[,.!?]?\s*", text))

def get_url_from_id(full_name, id):
    # [–ò–º—è](tg://user?id=123456789)
    return f"[{full_name}](tg://user?id={id})"

def if_reply_to_message(message, user_id):
    if message.reply_to_message:
        reply_to_message_id = message.reply_to_message.from_user.id
        return db.get_user_by_id(reply_to_message_id), 1
    else:
        return db.get_user_by_id(int(user_id)), 0

def get_current_pair(schedule_times):
    """
    schedule_times = ["8:20-9:50", "10:00-11:30", ...]
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–Ω–æ–º–µ—Ä –ø–∞—Ä—ã, –º–∏–Ω—É—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞) –∏–ª–∏ (None, None)
    """
    now = datetime.now().time()

    for i, pair in enumerate(schedule_times, start=1):
        start_str, end_str = pair.split("-")
        start = datetime.strptime(start_str, "%H:%M").time()
        end = datetime.strptime(end_str, "%H:%M").time()

        if start <= now <= end:
            now_dt = datetime.combine(datetime.today(), now)
            end_dt = datetime.combine(datetime.today(), end)
            remaining = int((end_dt - now_dt).total_seconds() // 60)
            return i, remaining

    return None, None

@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.type == 'private':
        markup = types.InlineKeyboardMarkup()
        bot_username = (bot.get_me()).username
        add_to_group_url = f"https://t.me/{bot_username}?startgroup=true"
        button1 = types.InlineKeyboardButton("–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É :3", url=add_to_group_url)
        markup.add(button1)
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞–ª–∏–∫, –∏ –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!", reply_markup=markup)

@bot.message_handler(commands=['ping'])
def ping_command(message):
    bot.reply_to(message, "üèì –ü–æ–Ω—å–≥~")

@bot.message_handler(commands=['check'])
def check_admin_rights(message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∫–∞–∫ –æ —á–ª–µ–Ω–µ —á–∞—Ç–∞
    chat_id = message.chat.id
    bot_user_id = bot.get_me().id  # ID —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    chat_member = bot.get_chat_member(chat_id, bot_user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∞–≤–∞
    if chat_member.status == 'administrator':
        rights = []
        if chat_member.can_post_messages:
            rights.append('–ú–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')
        if chat_member.can_edit_messages:
            rights.append('–ú–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')
        if chat_member.can_delete_messages:
            rights.append('–ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')
        if chat_member.can_invite_users:
            rights.append('–ú–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        if chat_member.can_restrict_members:
            rights.append('–ú–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
        if chat_member.can_pin_messages:
            rights.append('–ú–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')
        if chat_member.can_promote_members:
            rights.append('–ú–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤')
        print("–ü—Ä–∞–≤–∞:" + "\n".join(rights))
    else:
        print("–ü–æ—Ö–æ–¥—É, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
    bot.send_message(chat_id, "–Ø –ø—Ä–æ–≤–µ—Ä–∏–ª –≤—Å–µ –º–æ–¥—É–ª–∏, –∏ –≤—ã–≤–µ–ª –≤ –∫–æ–Ω—Å–æ–ª—å :)")

# –°–¥–µ–ª–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def message_listener(message):
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º =3
    author = message.from_user
    last_name = author.last_name
    if not last_name:
        last_name = ""
    if not db.get_user_by_id(author.id):
        db.add_user(telegram_id=author.id,
                    telegram_username=author.username,
                    full_name=author.first_name + last_name)
    if check_for_kalik(message):
        kalik(message)
    
def kalik(message):
    text = message.text.lower()
    
    """contains_profanity = bool(profanity_regex.search(text))
    if contains_profanity:
        bot.reply_to(message, "–Ø –Ω–µ –ª—é–±–ª—é –º–∞—Ç—ã! üò°")
        return"""
    
    # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å—Ç—ã–π –∑–æ–≤
    from commands import call
    if call.handle(message, bot, db, perm, CONSTANTS, FOUNDER_ID):
        return

    # 2. –ü–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    for cmd in COMMANDS:
        if any(alias in text for alias in getattr(cmd, "ALIASES", [])):
            cmd.handle(message, bot, db, perm, CONSTANTS, FOUNDER_ID)
            return

    # 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    # bot.reply_to(message, random.choice(CONSTANTS.dont_know))
    # –†–∞–Ω—å—à–µ –±–æ—Ç –Ω–µ –∑–Ω–∞–ª —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∞ —Ç–µ–ø–µ—Ä—å, –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–µ >:3
    send_to_ai(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    data = call.data
    if data.startswith("group."):
        if call.from_user.id == FOUNDER_ID:
            group_name = data.split(".")[1]
            group = db.get_group_by_name(group_name)
            # –î–æ–¥–µ–ª–∞—Ç—å –Ω–∞–¥–æ, —è —Å–ø–∞—Ç—å :|


me = bot.get_me()
print(f"–Ø –∑–∞–ø—É—â–µ–Ω :3 –£ –º–µ–Ω—è –Ω–∏–∫ @{me.username} —Å id {me.id}.\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å!")
try:
    bot.infinity_polling()
except requests.exceptions.ConnectionError:
    print("üåê –û–π, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ—Ç–µ—Ä—è–ª—Å—è... –∏—â–µ–º —Å–Ω–æ–≤–∞ ü¶ä")
except Exception as e:
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ª–æ–≤–∏–º –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    print(f"‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
