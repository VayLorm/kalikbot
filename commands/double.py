from telebot import TeleBot
from telebot.types import Message
import modules.permissions as permissions
import database
from datetime import datetime, timedelta
import modules.gloris_integration as gloris
from modules.constants import CONSTANTS

def _split_pairs_to_lesson_slots(pair_times):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (–∏–∑ –ë–î) –Ω–∞ –ø–æ—É—Ä–æ—á–Ω—ã–µ —Å–ª–æ—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ 45 –º–∏–Ω—É—Ç).
    –ï—Å–ª–∏ –ø–∞—Ä–∞ 90 –º–∏–Ω -> –¥–≤–∞ —Å–ª–æ—Ç–∞, –µ—Å–ª–∏ 45 –º–∏–Ω -> –æ–¥–∏–Ω —Å–ª–æ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (start_time, end_time).
    """
    slots = []
    for p in pair_times:
        start_str, end_str = p.split("-")
        start_dt = datetime.strptime(start_str.strip(), "%H:%M")
        end_dt = datetime.strptime(end_str.strip(), "%H:%M")
        duration_min = int((end_dt - start_dt).total_seconds() // 60)

        if duration_min >= 80:  # —Å–¥–≤–æ–µ–Ω–Ω–∞—è –ø–∞—Ä–∞
            first_end = start_dt + timedelta(minutes=45)
            slots.append((start_dt.time(), first_end.time()))
            slots.append((first_end.time(), end_dt.time()))
        else:
            slots.append((start_dt.time(), end_dt.time()))
    return slots


def get_current_status(pair_times, lessons):
    """
    pair_times: ["8:20-9:50", "10:00-11:30", ...]  # –±–ª–æ–∫–∞–º–∏, –∫–∞–∫ –≤ –ë–î
    lessons: ["–§–∏–∑–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", ...]  # –ø–æ—É—Ä–æ—á–Ω–æ, –∏–∑ Gloris

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      ("before", idx, minutes, subject)
      ("lesson", idx, minutes, subject)
      ("break", idx, minutes, subject)
      ("lunch", idx, minutes, "–û–ë–ï–î")
      ("after", None, None, None)
    """
    now_dt = datetime.now()
    now_time = now_dt.time()

    lesson_slots = _split_pairs_to_lesson_slots(pair_times)
    if not lesson_slots:
        return "after", None, None, None

    # –¥–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è
    first_start = lesson_slots[0][0]
    if now_time < first_start:
        until = int((datetime.combine(datetime.today(), first_start) - now_dt).total_seconds() // 60)
        return "before", 1, until, lessons[0]

    for idx, (start, end) in enumerate(lesson_slots):
        if start <= now_time <= end:
            subject = lessons[idx] if idx < len(lessons) else "?"

            if subject.upper().startswith("–û–ë–ï–î"):
                remaining = int((datetime.combine(datetime.today(), end) - now_dt).total_seconds() // 60)
                return "lunch", idx + 1, remaining, "–û–ë–ï–î"

            # –∏—â–µ–º —Å—Ç–∞–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            j = idx
            while j + 1 < len(lessons) and lessons[j + 1] == subject:
                j += 1
                end = lesson_slots[j][1]

            remaining = int((datetime.combine(datetime.today(), end) - now_dt).total_seconds() // 60)
            return "lesson", idx + 1, remaining, subject

        if now_time < start:
            until = int((datetime.combine(datetime.today(), start) - now_dt).total_seconds() // 60)
            next_subj = lessons[idx] if idx < len(lessons) else "?"
            if next_subj.upper().startswith("–û–ë–ï–î"):
                return "lunch", idx + 1, until, "–û–ë–ï–î"
            return "break", idx + 1, until, next_subj

    return "after", None, None, None


ALIASES = ["–ø–∞—Ä–∞"]

def handle(
    message: Message,
    bot: TeleBot,
    db: database.Database,
    perm: permissions.Permissions,
    CONSTANTS: CONSTANTS,
    FOUNDER_ID: int,
) -> None:
    schedule_times = db.get_schedule()  # –±–ª–æ–∫–∞–º–∏ (–∫–∞–∫ —Å–µ–π—á–∞—Å)
    date = datetime.weekday(datetime.now()) + 1

    chat_id = message.chat.id
    group = db.get_group_by_tg_group_id(chat_id)
    if not group:
        bot.reply_to(message, CONSTANTS.tg_no_group)
        return

    group_id = group["gloris_id"]
    lessons = gloris.get_schedule(date, group_id)

    status, num, remaining, subject = get_current_status(schedule_times, lessons)

    remaining += 1

    if status == "before":
        hours, minutes = divmod(remaining, 60)
        if hours > 0:
            bot.reply_to(message, f"–£—á–µ–±–Ω—ã–π –¥–µ–Ω—å –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏ üå∏ –ü–µ—Ä–≤–∞—è –ø–∞—Ä–∞ ‚Äî {subject}, –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω ‚è≥")
        else:
            bot.reply_to(message, f"–î–æ –≤—Å—Ç—Ä–µ—á–∏ —Å {subject} –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –º–∏–Ω—É—Ç üåø‚ú®")

    elif status == "lesson":
        bot.reply_to(message, f"–°–µ–π—á–∞—Å –∏–¥—ë—Ç {num}-–π —É—Ä–æ–∫ ({subject}), –æ–Ω –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω—É—Ç üïí~ –ø–æ—Ç–µ—Ä–ø–∏ –Ω–µ–º–Ω–æ–∂–∫–æ >w<")

    elif status == "break":
        bot.reply_to(message, f"–°–µ–π—á–∞—Å –ø–µ—Ä–µ–º–µ–Ω–∫–∞ ‚ú® –î–æ {num}-–≥–æ —É—Ä–æ–∫–∞ ({subject}) –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –º–∏–Ω—É—Ç–æ—á–µ–∫ ‚è≥")

    elif status == "lunch":
        bot.reply_to(message, f"–°–µ–π—á–∞—Å –æ–±–µ–¥ üçé‚ú® –û—Ç–¥—ã—Ö–∞–π, —É —Ç–µ–±—è –µ—Å—Ç—å {remaining} –º–∏–Ω—É—Ç!")

    else:
        bot.reply_to(message, "–£—á–µ–±–Ω—ã–π –¥–µ–Ω—å —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è üåô")
