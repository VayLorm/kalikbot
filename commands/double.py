from telebot import TeleBot
from telebot.types import Message
import modules.permissions as permissions
import database
from typing import Any, Dict
from datetime import datetime
import modules.gloris_integration as gloris
from modules.constants import CONSTANTS

def get_current_status(schedule_times, lessons):
    """
    schedule_times = ["8:20-9:05", "9:05-9:50", ...]  # –ø–æ—É—Ä–æ—á–Ω–æ!
    lessons = ["–§–∏–∑–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", ...]  # —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    ("lesson" | "break" | "before" | "after", –Ω–æ–º–µ—Ä, –º–∏–Ω—É—Ç—ã, –ø—Ä–µ–¥–º–µ—Ç/—Å–ø–∏—Å–æ–∫)
    """
    now = datetime.now().time()

    # 0. –î–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä
    first_start = datetime.strptime(schedule_times[0].split("-")[0], "%H:%M").time()
    if now < first_start:
        now_dt = datetime.combine(datetime.today(), now)
        start_dt = datetime.combine(datetime.today(), first_start)
        remaining = int((start_dt - now_dt).total_seconds() // 60)
        return "before", 1, remaining, lessons[0]

    for i, pair in enumerate(schedule_times):
        start_str, end_str = pair.split("-")
        start = datetime.strptime(start_str, "%H:%M").time()
        end = datetime.strptime(end_str, "%H:%M").time()

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –∏–¥—ë—Ç –ª–∏ —É—Ä–æ–∫
        if start <= now <= end:
            subject = lessons[i] if i < len(lessons) else "?"

            # –∏—â–µ–º —Å—Ç–∞–∫
            j = i
            while j + 1 < len(lessons) and lessons[j + 1] == subject:
                j += 1
                _, end_str = schedule_times[j].split("-")
                end = datetime.strptime(end_str, "%H:%M").time()

            # —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            now_dt = datetime.combine(datetime.today(), now)
            end_dt = datetime.combine(datetime.today(), end)
            remaining = int((end_dt - now_dt).total_seconds() // 60)

            return "lesson", i + 1, remaining, subject

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω—É (—Å–µ–π—á–∞—Å –º–µ–∂–¥—É i –∏ i+1 —É—Ä–æ–∫–æ–º)
        if now < start:
            prev_end = None
            if i > 0:
                _, prev_end_str = schedule_times[i - 1].split("-")
                prev_end = datetime.strptime(prev_end_str, "%H:%M").time()

            if not prev_end or prev_end < now < start:
                # –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
                now_dt = datetime.combine(datetime.today(), now)
                start_dt = datetime.combine(datetime.today(), start)
                remaining = int((start_dt - now_dt).total_seconds() // 60)

                next_subject = lessons[i] if i < len(lessons) else "?"
                return "break", i + 1, remaining, next_subject

    # 3. –ü–æ—Å–ª–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤
    return "after", None, None, None

ALIASES = ["–ø–∞—Ä–∞"]

def handle(
    message: Message,
    bot: TeleBot,
    db: database.Database,
    perm: permissions.Permissions,
    CONSTANTS: CONSTANTS,
    FOUNDER_ID: int,
) -> None:
    schedule_times = db.get_schedule()
    date = datetime.weekday(datetime.now()) + 1

    chat_id = message.chat.id
    group = db.get_group_by_tg_group_id(chat_id)
    if not group:
        bot.reply_to(message, CONSTANTS["tg_no_group"])
        return

    group_id = group["gloris_id"]
    lessons = gloris.get_schedule(date, group_id)

    status, num, remaining, subject = get_current_status(schedule_times, lessons)

    if status == "before":
        hours, minutes = divmod(remaining, 60)
        if hours > 0:
            bot.reply_to(message, f"–£—á–µ–±–Ω—ã–π –¥–µ–Ω—å –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è ‚ú® –î–æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã ({subject}) –æ—Å—Ç–∞–ª–æ—Å—å {hours} —á {minutes} –º–∏–Ω ‚è≥")
        else:
            bot.reply_to(message, f"–£—á–µ–±–Ω—ã–π –¥–µ–Ω—å –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è ‚ú® –î–æ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã ({subject}) –æ—Å—Ç–∞–ª–æ—Å—å {minutes} –º–∏–Ω—É—Ç ‚è≥")

    elif status == "lesson":
        bot.reply_to(
            message,
            f"–°–µ–π—á–∞—Å –∏–¥—ë—Ç {num}-–π —É—Ä–æ–∫ ({subject}), –æ–Ω –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω—É—Ç üïí~ –ø–æ—Ç–µ—Ä–ø–∏ –Ω–µ–º–Ω–æ–∂–∫–æ >w<"
        )

    elif status == "break":
        bot.reply_to(
            message,
            f"–°–µ–π—á–∞—Å –ø–µ—Ä–µ–º–µ–Ω–∞ ‚ú® –î–æ {num}-–≥–æ —É—Ä–æ–∫–∞ ({subject}) –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –º–∏–Ω—É—Ç ‚è≥"
        )

    else:  # after
        bot.reply_to(message, "–£—á–µ–±–Ω—ã–π –¥–µ–Ω—å —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è üåô")
