from telebot import TeleBot
from telebot.types import Message
import modules.permissions as permissions
from modules.constants import CONSTANTS
import database
import random
import traceback
import datetime

def get_url_from_id(full_name, id):
    return f"[{full_name}](tg://user?id={id})"

def escape_markdown(text: str) -> str:
    escape_chars = r'_-'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)

ALIASES = ["—Ä–µ—Ä–æ–ª–ª"]

def handle(
    message: Message,
    bot: TeleBot,
    db: database.Database,
    perm: permissions.Permissions,
    CONSTANTS: CONSTANTS,
    FOUNDER_ID: int,
) -> bool:
    try:
        # –ê–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã
        author = db.get_user_by_id(message.from_user.id)
        if not author:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ.")
            return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not (perm.check_for_permissions(author["type"], "duty.reroll") or message.from_user.id == FOUNDER_ID):
            bot.reply_to(message, random.choice(CONSTANTS["kalik_noperm"]))
            return True

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ —á–∞—Ç—É
        group = db.get_group_by_id(message.chat.id)
        if not group:
            bot.reply_to(message, "‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–∞–∑–µ.")
            return True

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–ø–æ –∏—Ö telegram_id)
        users = [db.get_user_by_id(uid) for uid in group["students"]]
        users = [u for u in users if u]  # —É–±–∏—Ä–∞–µ–º None

        if not users:
            bot.reply_to(message, "‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return True

        today = datetime.datetime.now()
        today_date = today.strftime("%Y-%m-%d")
        today_weekday = today.strftime("%A").lower()  # –Ω–∞–ø—Ä–∏–º–µ—Ä 'monday'

        # –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        def priority(user):
            duty_info = user.get("duty_info", {})
            duties = duty_info.get("amount_of_duties", 0)

            # –ß–µ–º –¥–æ–ª—å—à–µ –Ω–µ –¥–µ–∂—É—Ä–∏–ª ‚Äî —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            last_duty = duty_info.get("last_duty")
            if last_duty:
                days_ago = (today - datetime.datetime.strptime(last_duty, "%Y-%m-%d")).days
            else:
                days_ago = 99999

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            preferences = [p.lower() for p in duty_info.get("preferences", [])]
            pref_bonus = 0
            if today_weekday in preferences:
                pref_bonus -= 100
            if today_date in preferences:
                pref_bonus -= 200

            return (duties, -days_ago, pref_bonus, random.random())

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        sorted_users = sorted(users, key=priority)

        selected = []
        while len(selected) < 2 and sorted_users:
            candidate = sorted_users.pop(0)
            duty_info = candidate.get("duty_info", {})

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã
            pair_id = duty_info.get("pair_id")
            if pair_id:
                pair_user = db.get_user_by_id(pair_id)
                if pair_user and pair_user not in selected:
                    selected.append(pair_user)

            if candidate not in selected:
                selected.append(candidate)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if selected:
            reply_text = "üé≤ –†–µ—Ä–æ–ª–ª –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã–±—Ä–∞–Ω—ã –¥–µ–∂—É—Ä–Ω—ã–µ:\n"
            for u in selected:
                duty_info = u.get("duty_info", {})
                reply_text += f"‚Ä¢ {get_url_from_id(escape_markdown(u['full_name']), u['telegram_id'])} (–¥–µ–∂—É—Ä—Å—Ç–≤: {duty_info.get('amount_of_duties', 0)})\n"
            bot.reply_to(message, reply_text, parse_mode="MarkdownV2")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –¥–µ–∂—É—Ä–Ω—ã—Ö.")

        return True

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–æ–ª–ª–µ: {e}")
        traceback.print_exc()
        return True
