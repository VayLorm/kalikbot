from telebot import TeleBot
from telebot.types import Message
import modules.permissions as permissions
from modules.constants import CONSTANTS
import database
import random
import traceback
import datetime

def md_escape(text: str) -> str:
    if text is None:
        return ""
    text = str(text)
    # —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join('\\' + c if c in escape_chars else c for c in text)

# –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (MarkdownV2)
def get_url_from_id(full_name, tg_id):
    return f"[{md_escape(full_name)}](tg://user?id={tg_id})"

ALIASES = ["—Ä–µ—Ä–æ–ª–ª"]

def handle(
    message: Message,
    bot: TeleBot,
    db: database.Database,
    perm: permissions.Permissions,
    CONSTANTS: CONSTANTS,
    FOUNDER_ID: int,
) -> bool:
    """
    –ö–æ–º–∞–Ω–¥–∞ —Ä–µ—Ä–æ–ª–ª:
    - –±–µ—Ä—ë—Ç –≥—Ä—É–ø–ø—É –ø–æ message.chat.id (db.get_group_by_id)
    - —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (db.get_user_by_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ telegram_id)
    - –≤—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ: (amount_of_duties, pref_score, -days_ago, random)
      –≥–¥–µ pref_score –¥–∞—ë—Ç –±–æ–Ω—É—Å, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ preferences –∏–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (—Ä—É—Å—Å–∫–∏–π)
    - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –¥–æ 2 —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞—è pair_id (–µ—Å–ª–∏ –ø–∞—Ä–∞ –≤ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ ‚Äî –æ–Ω–∏ –æ–±–∞ –±–µ—Ä—É—Ç—Å—è)
    - –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢ —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ user["duty_info"] == None
    """
    try:
        parts = message.text.split()
        # –ö–∞–ª–∏, —Ä–µ—Ä–æ–ª–ª 12345678
        # –ù—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–∑ —Ç–∞–∫–∏ 12345678
        # –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–æ 12345678 –µ—Å—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –µ—Å–ª–∏ –Ω–µ—Ç—É —Ç–æ –±–µ—Ä—ë–º message.chat.id
        if len(parts) > 2:
            group_id = int(parts[2])
        else:
            group_id = message.chat.id
        # 1) –ê–≤—Ç–æ—Ä –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        author = db.get_user_by_id(message.from_user.id)
        if not author:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ.")
            return True

        if not (perm.check_for_permissions(author["type"], "duty.reroll") or message.from_user.id == FOUNDER_ID):
            bot.reply_to(message, random.choice(CONSTANTS["kalik_noperm"]))
            return True

        # 2) –ì—Ä—É–ø–ø–∞ –ø–æ ID —á–∞—Ç–∞
        group = db.get_group_by_id(group_id)
        if not group:
            bot.reply_to(message, "‚ùå –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–∞–∑–µ.")
            return True

        # 3) –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ group["students"]
        students_ids = group.get("students", []) or []
        users = [db.get_user_by_id(uid) for uid in students_ids]
        users = [u for u in users if u]  # —É–±–∏—Ä–∞–µ–º None –Ω–∞ –≤—Å—è–∫–∏–π

        if not users:
            bot.reply_to(message, "‚ùå –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return True

        # 4) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
        now = datetime.datetime.now()
        today_date = now.strftime("%Y-%m-%d")  # '2025-09-28' —Ñ–æ—Ä–º–∞—Ç
        weekdays_ru = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        today_weekday_ru = weekdays_ru[now.weekday()]

        # 5) –•–µ–ª–ø–µ—Ä—ã ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º last_duty –∏ —Å—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å –ø–æ preferences
        def parse_days_ago(last_duty):
            """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å last_duty –¥–æ today (int),
            –∏–ª–∏ None, –µ—Å–ª–∏ last_duty == None –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.
            """
            if not last_duty:
                return None
            try:
                d = datetime.datetime.strptime(last_duty, "%Y-%m-%d")
                return (now - d).days
            except Exception:
                return None

        def calc_pref_score(preferences):
            """
            preferences –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º.
            –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ ‚Äî —á–µ–º –ú–ï–ù–¨–®–ï, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
            –î–∞—ë–º:
              - –±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ) –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ = —Å–µ–≥–æ–¥–Ω—è
              - –º–µ–Ω—å—à–∏–π –±–æ–Ω—É—Å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ = —Å–µ–≥–æ–¥–Ω—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
            (–ß–∏—Å–ª–∞ –ø–æ–¥–æ–±—Ä–∞–Ω—ã —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –ø—Ä–æ—á–∏—Ö —Ä–∞–≤–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–º–µ–ª–∏ –∑–∞–º–µ—Ç–Ω—ã–π –≤–µ—Å.)
            """
            if not preferences:
                return 0
            score = 0
            for p in preferences:
                if not isinstance(p, str):
                    continue
                low = p.strip().lower()
                if low == today_date:
                    score -= 1000   # —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ ‚Äî —Å–∞–º—ã–π —Å–∏–ª—å–Ω—ã–π –±–æ–Ω—É—Å
                elif low == today_weekday_ru:
                    score -= 500    # —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ ‚Äî —Å–∏–ª—å–Ω—ã–π –±–æ–Ω—É—Å
                # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ç–∏–ø–∞ "–ø–æ–Ω" –∏ —Ç.–ø. –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
            return score

        # 6) –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
        def priority(user):
            """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple (amount_of_duties, pref_score, -days_ago, rand)
            - amount_of_duties: –º–µ–Ω—å—à–µ => –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–µ—Ä–≤–∏—á–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π)
            - pref_score: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É–ª—É—á—à–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –µ—Å–ª–∏ preference —Å–æ–≤–ø–∞–¥–∞—é—Ç
            - -days_ago: —á–µ–º –¥–æ–ª—å—à–µ –Ω–µ –¥–µ–∂—É—Ä–∏–ª, —Ç–µ–º –º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ç.–µ. –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            - random.random(): –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º user.get("duty_info") –±–µ–∑–æ–ø–∞—Å–Ω–æ, –µ—Å–ª–∏ –æ–Ω None.
            """
            duty_info = user.get("duty_info") or {}  # –µ—Å–ª–∏ None -> –ø—É—Å—Ç–æ–π dict

            duties = duty_info.get("amount_of_duties")
            if duties is None:
                duties = 0

            last = duty_info.get("last_duty")
            days_ago = parse_days_ago(last)
            if days_ago is None:
                # –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–∂—É—Ä–∏–ª –∏–ª–∏ –Ω–µ–ø–∞—Ä—Å–∏–±–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ -> —Å—á–∏—Ç–∞–µ–º "–æ—á–µ–Ω—å –¥–∞–≤–Ω–æ"
                days_val = 99999
            else:
                days_val = days_ago

            prefs = duty_info.get("preferences") or []
            pref_score = calc_pref_score(prefs)

            # –ú–µ–Ω—å—à–µ tuple = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
            return (duties, pref_score, -days_val, random.random())

        # 7) –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_users = sorted(users, key=priority)

        # 8) –í—ã–±–æ—Ä –¥–æ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫ —Å —É—á—ë—Ç–æ–º pair_id
        selected = []
        used_ids = set()

        for candidate in sorted_users:
            if len(selected) >= 2:
                break

            cand_id = candidate.get("telegram_id")
            if cand_id in used_ids:
                continue

            duty_info = candidate.get("duty_info") or {}
            pair_id = duty_info.get("pair_id")

            if pair_id:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –≤ –±–∞–∑–µ –∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –≤ —ç—Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ
                pair_user = db.get_user_by_id(pair_id)
                if pair_user and pair_user.get("telegram_id") in students_ids:
                    # –ï—Å–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É (–æ–±–∞ —Å—Ä–∞–∑—É)
                    if pair_user.get("telegram_id") not in used_ids:
                        selected.append(pair_user)
                        used_ids.add(pair_user.get("telegram_id"))
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –µ—Å–ª–∏ –µ—â—ë –µ—Å—Ç—å –º–µ—Å—Ç–æ –∏ –æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω
                    if cand_id not in used_ids and len(selected) < 2:
                        selected.append(candidate)
                        used_ids.add(cand_id)
                    # –µ—Å–ª–∏ –ø–∞—Ä–∞ –∑–∞–Ω—è–ª–∞ 2 –º–µ—Å—Ç–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
                    if len(selected) >= 2:
                        break
                    # –ò–¥—ë–º –¥–∞–ª—å—à–µ
                    continue
                # –µ—Å–ª–∏ pair_id –Ω–µ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —é–∑–µ—Ä–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º pair_id –∏ –ø—Ä–æ–±—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫–∞–∫ –æ–¥–∏–Ω–æ—á–∫—É

            # –ï—Å–ª–∏ —É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–µ—Ç –ø–∞—Ä—ã (–∏–ª–∏ –ø–∞—Ä–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è) ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
            selected.append(candidate)
            used_ids.add(cand_id)

        # 9) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not selected:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –¥–µ–∂—É—Ä–Ω—ã—Ö.")
            return True

        # –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        reply_lines = [f"üé≤ –†–µ—Ä–æ–ª–ª –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã–±—Ä–∞–Ω—ã –¥–µ–∂—É—Ä–Ω—ã–µ ({len(selected)}):"]
        for u in selected:
            info = u.get("duty_info") or {}
            reply_lines.append(f"‚Ä¢ {get_url_from_id(u.get('full_name'), u.get('telegram_id'))} ‚Äî –¥–µ–∂—É—Ä—Å—Ç–≤: {info.get('amount_of_duties', 0)}; last: {info.get('last_duty') or '–Ω–∏–∫–æ–≥–¥–∞'}")

        reply_text = "\n".join(reply_lines)
        bot.reply_to(message, reply_text, parse_mode="MarkdownV2")

        return True

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ—Ä–æ–ª–ª–∞: {e}")
        traceback.print_exc()
        return True